int jobScheduling(int* startTime, int startTimeSize, int* endTime, int endTimeSize, int* profit, int profitSize){
    int n = startTimeSize;
    int *dp = (int*)malloc(sizeof(int) * n);
    int *end = (int*)malloc(sizeof(int) * n);
    int *start = (int*)malloc(sizeof(int) * n);
    int *index = (int*)malloc(sizeof(int) * n);
    for (int i = 0; i < n; i++) {
        index[i] = i;
    }
    for (int i = 0; i < n; i++) {
        start[i] = startTime[i];
        end[i] = endTime[i];
    }
    qsort(index, n, sizeof(int), cmp);
    for (int i = 0; i < n; i++) {
        dp[i] = profit[i];
    }
    for (int i = 0; i < n; i++) {
        for (int j = i - 1; j >= 0; j--) {
            if (end[index[j]] <= start[index[i]]) {
                dp[i] = fmax(dp[i], dp[j] + profit[index[i]]);
                break;
            }
        }
        if (i > 0) {
            dp[i] = fmax(dp[i], dp[i - 1]);
        }
    }
    int res = dp[n - 1];
    free(dp);
    free(end);
    free(start);
    free(index);
    return res;
}
