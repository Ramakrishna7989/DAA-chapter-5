#include <stdio.h>

int min(int a, int b) {
    return a < b ? a : b;
}

int getMax(int arr[], int n) {
    int result = 0;
    for (int i = 0; i < n; i++) {
        if (arr[i] > result) {
            result = arr[i];
        }
    }
    return result;
}

int sum(int arr[], int start, int end) {
    int total = 0;
    for (int i = start; i <= end; i++) {
        total += arr[i];
    }
    return total;
}

int minMaxWorkingTime(int jobs[], int n, int k) {
    int dp[n + 1][k + 1];
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= k; j++) {
            dp[i][j] = 0;
        }
    }

    int sumArr[n + 1];
    sumArr[0] = 0;
    for (int i = 1; i <= n; i++) {
        sumArr[i] = sumArr[i - 1] + jobs[i - 1];
    }

    for (int i = 1; i <= n; i++) {
        dp[i][1] = sumArr[i];
    }

    for (int i = 1; i <= k; i++) {
        dp[1][i] = jobs[0];
    }

    for (int i = 2; i <= n; i++) {
        for (int j = 2; j <= k; j++) {
            int best = INT_MAX;
            for (int p = 1; p < i; p++) {
                best = min(best, max(dp[p][j - 1], sumArr[i] - sumArr[p]));
            }
            dp[i][j] = best;
        }
    }

    return dp[n][k];
}

int main() {
    int jobs[] = {3, 2, 4, 1};
    int n = sizeof(jobs) / sizeof(jobs[0]);
    int k = 2;
    printf("Minimum possible maximum working time: %d\n", minMaxWorkingTime(jobs, n, k));
    return 0;
}
